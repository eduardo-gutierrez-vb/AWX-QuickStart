#!/bin/bash
set -e

# ============================
# INFORMA√á√ïES E CR√âDITOS
# ============================

SCRIPT_VERSION="2.0"
SCRIPT_AUTHOR="Eduardo Gutierrez"
SCRIPT_DESCRIPTION="Script de Implanta√ß√£o AWX com Kind - Vers√£o Interativa"

# ============================
# CORES E FUN√á√ïES DE LOG APRIMORADAS
# ============================

# Cores expandidas para melhor UX
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;37m'
BOLD='\033[1m'
DIM='\033[2m'
NC='\033[0m' # No Color

# S√≠mbolos Unicode para melhor visual
CHECK="‚úì"
CROSS="‚úó"
ARROW="‚Üí"
STAR="‚òÖ"
GEAR="‚öô"
ROCKET="üöÄ"
INFO="‚Ñπ"
WARNING="‚ö†"

# Fun√ß√£o para log colorido aprimorada
log_info() {
    echo -e "${BLUE}${INFO}${NC} ${DIM}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}${CHECK}${NC} ${DIM}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}${WARNING}${NC} ${DIM}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}${CROSS}${NC} ${DIM}[ERROR]${NC} $1"
}

log_debug() {
    echo -e "${PURPLE}${GEAR}${NC} ${DIM}[DEBUG]${NC} $1"
}

log_step() {
    echo -e "${CYAN}${ARROW}${NC} ${BOLD}$1${NC}"
}

log_header() {
    echo -e "\n${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë${NC} ${WHITE}${BOLD}$1${NC} ${CYAN}‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}\n"
}

log_credits() {
    echo -e "\n${PURPLE}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ${NC}"
    echo -e "${PURPLE}‚îÇ${NC} ${BOLD}${SCRIPT_DESCRIPTION}${NC} ${PURPLE}‚îÇ${NC}"
    echo -e "${PURPLE}‚îÇ${NC} ${DIM}Vers√£o: ${SCRIPT_VERSION}${NC} ${PURPLE}‚îÇ${NC}"
    echo -e "${PURPLE}‚îÇ${NC} ${DIM}Autor: ${GREEN}${SCRIPT_AUTHOR}${NC} ${PURPLE}‚îÇ${NC}"
    echo -e "${PURPLE}‚îÇ${NC} ${DIM}Desenvolvido com ${RED}‚ô•${NC} para a comunidade${NC} ${PURPLE}‚îÇ${NC}"
    echo -e "${PURPLE}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ${NC}\n"
}

# ============================
# FUN√á√ïES DE ANIMA√á√ÉO E UX
# ============================

# Spinner moderno para opera√ß√µes longas
show_spinner() {
    local pid=$1
    local message=$2
    local delay=0.1
    local spinstr='‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è'
    
    tput civis # Esconder cursor
    
    while ps -p $pid > /dev/null 2>&1; do
        local temp=${spinstr#?}
        printf "\r${BLUE}%c${NC} ${message}" "$spinstr"
        spinstr=$temp${spinstr%"$temp"}
        sleep $delay
    done
    
    printf "\r${GREEN}${CHECK}${NC} ${message} - Conclu√≠do!\n"
    tput cnorm # Mostrar cursor
}

# Barra de progresso moderna
show_progress() {
    local current=$1
    local total=$2
    local message=$3
    local width=50
    local percentage=$((current * 100 / total))
    local filled=$((current * width / total))
    local empty=$((width - filled))
    
    printf "\r${CYAN}${message}${NC} ["
    printf "%${filled}s" | tr ' ' '‚ñà'
    printf "%${empty}s" | tr ' ' '‚ñë'
    printf "] ${BOLD}%d%%${NC}" $percentage
    
    if [ $current -eq $total ]; then
        printf " ${GREEN}${CHECK} Completo!${NC}\n"
    fi
}

# Fun√ß√£o para pausar com estilo
pause_with_style() {
    local message=${1:-"Pressione qualquer tecla para continuar"}
    echo -e "\n${DIM}${message}...${NC}"
    read -n 1 -s
    echo
}

# ============================
# INTERFACE INTERATIVA PRINCIPAL
# ============================

show_welcome() {
    clear
    log_credits
    
    echo -e "${BOLD}${WHITE}Bem-vindo ao Instalador AWX Interativo!${NC}\n"
    echo -e "${DIM}Este script ir√° configurar um ambiente AWX completo usando Kind e Kubernetes.${NC}"
    echo -e "${DIM}Voc√™ pode escolher entre configura√ß√£o autom√°tica ou personalizada.${NC}\n"
}

show_system_info() {
    log_header "INFORMA√á√ïES DO SISTEMA"
    
    local cores=$(nproc --all)
    local mem_mb=$(awk '/MemTotal/ {print int($2/1024)}' /proc/meminfo)
    local disk_gb=$(df -h / | awk 'NR==2 {print $4}')
    local os_info=$(lsb_release -d 2>/dev/null | cut -f2 || echo "Linux")
    
    echo -e "${CYAN}${INFO} Sistema Operacional:${NC} ${os_info}"
    echo -e "${CYAN}${INFO} CPUs Dispon√≠veis:${NC} ${cores} cores"
    echo -e "${CYAN}${INFO} Mem√≥ria Total:${NC} ${mem_mb} MB"
    echo -e "${CYAN}${INFO} Espa√ßo em Disco:${NC} ${disk_gb} dispon√≠vel"
    echo -e "${CYAN}${INFO} Docker Status:${NC} $(command_exists docker && echo "${GREEN}Instalado${NC}" || echo "${YELLOW}N√£o instalado${NC}")"
    
    local profile=$(determine_profile "$cores" "$mem_mb")
    echo -e "\n${BOLD}Perfil Recomendado:${NC} ${GREEN}${profile}${NC}"
    
    if [ "$profile" = "prod" ]; then
        echo -e "${DIM}‚Ä¢ M√∫ltiplas r√©plicas para alta disponibilidade${NC}"
        echo -e "${DIM}‚Ä¢ Recursos otimizados para produ√ß√£o${NC}"
    else
        echo -e "${DIM}‚Ä¢ Configura√ß√£o single-node para desenvolvimento${NC}"
        echo -e "${DIM}‚Ä¢ Uso eficiente de recursos limitados${NC}"
    fi
}

interactive_main_menu() {
    while true; do
        show_welcome
        show_system_info
        
        echo -e "\n${BOLD}${WHITE}Escolha uma op√ß√£o:${NC}\n"
        
        PS3=$'\n'"${CYAN}${ARROW} Digite sua escolha: ${NC}"
        
        options=(
            "ü§ñ Instala√ß√£o Autom√°tica (Recomendado)"
            "‚öôÔ∏è  Configura√ß√£o Manual Personalizada"  
            "üìã Ver Informa√ß√µes Detalhadas do Sistema"
            "üìñ Exibir Ajuda e Documenta√ß√£o"
            "üö™ Sair"
        )
        
        select choice in "${options[@]}"; do
            case $REPLY in
                1)
                    log_step "Iniciando instala√ß√£o autom√°tica..."
                    MODE="auto"
                    initialize_resources
                    start_installation
                    return 0
                    ;;
                2)
                    log_step "Iniciando configura√ß√£o manual..."
                    MODE="manual"
                    interactive_configuration
                    return 0
                    ;;
                3)
                    show_detailed_system_info
                    break
                    ;;
                4)
                    show_help_interactive
                    break
                    ;;
                5)
                    log_step "Saindo do instalador. At√© logo!"
                    exit 0
                    ;;
                *)
                    log_error "Op√ß√£o inv√°lida. Tente novamente."
                    break
                    ;;
            esac
        done
    done
}

show_detailed_system_info() {
    clear
    log_header "AN√ÅLISE DETALHADA DO SISTEMA"
    
    # Detec√ß√£o de recursos
    local cores=$(detect_cores)
    local mem_mb=$(detect_mem_mb)
    local profile=$(determine_profile "$cores" "$mem_mb")
    
    echo -e "${BOLD}Recursos Detectados:${NC}"
    echo -e "‚îú‚îÄ ${CYAN}CPUs:${NC} ${cores} cores"
    echo -e "‚îú‚îÄ ${CYAN}Mem√≥ria:${NC} ${mem_mb} MB ($(echo "scale=1; $mem_mb/1024" | bc) GB)"
    echo -e "‚îî‚îÄ ${CYAN}Perfil:${NC} ${profile}"
    
    echo -e "\n${BOLD}Depend√™ncias:${NC}"
    local deps=("docker" "kind" "kubectl" "helm" "python3.9")
    for dep in "${deps[@]}"; do
        if command_exists "$dep"; then
            echo -e "‚îú‚îÄ ${GREEN}${CHECK}${NC} ${dep}"
        else
            echo -e "‚îú‚îÄ ${YELLOW}${CROSS}${NC} ${dep} (ser√° instalado)"
        fi
    done
    
    echo -e "\n${BOLD}Configura√ß√£o AWX Calculada:${NC}"
    calculate_replicas "$profile" "$cores"
    calculate_available_resources "$cores" "$mem_mb" "$profile"
    echo -e "‚îú‚îÄ ${CYAN}Web R√©plicas:${NC} ${WEB_REPLICAS}"
    echo -e "‚îú‚îÄ ${CYAN}Task R√©plicas:${NC} ${TASK_REPLICAS}"
    echo -e "‚îú‚îÄ ${CYAN}CPU Alocada:${NC} ${NODE_CPU} cores"
    echo -e "‚îî‚îÄ ${CYAN}Mem√≥ria Alocada:${NC} ${NODE_MEM_MB} MB"
    
    pause_with_style "Pressione qualquer tecla para voltar ao menu principal"
}

interactive_configuration() {
    clear
    log_header "CONFIGURA√á√ÉO MANUAL PERSONALIZADA"
    
    echo -e "${BOLD}Vamos configurar seu ambiente AWX passo a passo!${NC}\n"
    
    # Configura√ß√£o do cluster
    configure_cluster_interactive
    
    # Configura√ß√£o de recursos
    configure_resources_interactive
    
    # Configura√ß√£o da porta
    configure_port_interactive
    
    # Resumo da configura√ß√£o
    show_configuration_summary
    
    # Confirma√ß√£o final
    if confirm_installation; then
        start_installation
    else
        log_step "Retornando ao menu principal..."
        return
    fi
}

configure_cluster_interactive() {
    echo -e "${CYAN}${GEAR} Configura√ß√£o do Cluster${NC}\n"
    
    # Nome do cluster
    while true; do
        echo -e "${DIM}Nome do cluster (deixe vazio para usar padr√£o):${NC}"
        read -p "$(echo -e "${CYAN}${ARROW}${NC} ")" cluster_input
        
        if [ -z "$cluster_input" ]; then
            CLUSTER_NAME="awx-cluster-$(date +%Y%m%d)"
            log_info "Usando nome padr√£o: ${CLUSTER_NAME}"
            break
        elif [[ "$cluster_input" =~ ^[a-zA-Z0-9-]+$ ]]; then
            CLUSTER_NAME="$cluster_input"
            log_success "Nome do cluster definido: ${CLUSTER_NAME}"
            break
        else
            log_error "Nome inv√°lido. Use apenas letras, n√∫meros e h√≠fens."
        fi
    done
    echo
}

configure_resources_interactive() {
    echo -e "${CYAN}${GEAR} Configura√ß√£o de Recursos${NC}\n"
    
    # CPU
    local default_cpu=$(detect_cores)
    echo -e "${DIM}CPUs detectadas: ${default_cpu}${NC}"
    echo -e "${DIM}Quantas CPUs usar? (deixe vazio para usar autom√°tico):${NC}"
    read -p "$(echo -e "${CYAN}${ARROW}${NC} ")" cpu_input
    
    if [ -n "$cpu_input" ] && validate_cpu "$cpu_input"; then
        FORCE_CPU="$cpu_input"
        log_success "CPUs configuradas: ${FORCE_CPU}"
    else
        log_info "Usando detec√ß√£o autom√°tica de CPU"
    fi
    
    # Mem√≥ria
    local default_mem=$(detect_mem_mb)
    echo -e "\n${DIM}Mem√≥ria detectada: ${default_mem} MB${NC}"
    echo -e "${DIM}Quanta mem√≥ria usar (MB)? (deixe vazio para usar autom√°tico):${NC}"
    read -p "$(echo -e "${CYAN}${ARROW}${NC} ")" mem_input
    
    if [ -n "$mem_input" ] && validate_memory "$mem_input"; then
        FORCE_MEM_MB="$mem_input"
        log_success "Mem√≥ria configurada: ${FORCE_MEM_MB} MB"
    else
        log_info "Usando detec√ß√£o autom√°tica de mem√≥ria"
    fi
    
    # Recalcular recursos com valores fornecidos
    initialize_resources
    echo
}

configure_port_interactive() {
    echo -e "${CYAN}${GEAR} Configura√ß√£o de Rede${NC}\n"
    
    echo -e "${DIM}Porta para acessar o AWX (padr√£o: 8080):${NC}"
    read -p "$(echo -e "${CYAN}${ARROW}${NC} ")" port_input
    
    if [ -n "$port_input" ] && validate_port "$port_input"; then
        HOST_PORT="$port_input"
        log_success "Porta configurada: ${HOST_PORT}"
    else
        HOST_PORT=8080
        log_info "Usando porta padr√£o: ${HOST_PORT}"
    fi
    echo
}

show_configuration_summary() {
    log_header "RESUMO DA CONFIGURA√á√ÉO"
    
    echo -e "${BOLD}Sua configura√ß√£o personalizada:${NC}\n"
    
    echo -e "‚ï≠‚îÄ ${CYAN}Cluster${NC}"
    echo -e "‚îÇ  ‚îú‚îÄ Nome: ${GREEN}${CLUSTER_NAME}${NC}"
    echo -e "‚îÇ  ‚îî‚îÄ Porta: ${GREEN}${HOST_PORT}${NC}"
    echo -e "‚îÇ"
    echo -e "‚îú‚îÄ ${CYAN}Recursos${NC}"
    echo -e "‚îÇ  ‚îú‚îÄ CPUs: ${GREEN}${CORES} cores${NC}"
    echo -e "‚îÇ  ‚îú‚îÄ Mem√≥ria: ${GREEN}${MEM_MB} MB${NC}"
    echo -e "‚îÇ  ‚îî‚îÄ Perfil: ${GREEN}${PERFIL}${NC}"
    echo -e "‚îÇ"
    echo -e "‚îú‚îÄ ${CYAN}AWX${NC}"
    echo -e "‚îÇ  ‚îú‚îÄ Web R√©plicas: ${GREEN}${WEB_REPLICAS}${NC}"
    echo -e "‚îÇ  ‚îú‚îÄ Task R√©plicas: ${GREEN}${TASK_REPLICAS}${NC}"
    echo -e "‚îÇ  ‚îú‚îÄ CPU Alocada: ${GREEN}${NODE_CPU} cores${NC}"
    echo -e "‚îÇ  ‚îî‚îÄ Mem√≥ria Alocada: ${GREEN}${NODE_MEM_MB} MB${NC}"
    echo -e "‚îÇ"
    echo -e "‚îî‚îÄ ${CYAN}Acesso${NC}"
    echo -e "   ‚îî‚îÄ URL: ${GREEN}http://localhost:${HOST_PORT}${NC}"
    echo
}

confirm_installation() {
    echo -e "${BOLD}${WHITE}Confirmar instala√ß√£o?${NC}\n"
    
    PS3=$'\n'"${CYAN}${ARROW} Sua escolha: ${NC}"
    
    options=(
        "‚úÖ Sim, iniciar instala√ß√£o"
        "üìù Revisar configura√ß√£o"
        "üîô Voltar ao menu principal"
    )
    
    select choice in "${options[@]}"; do
        case $REPLY in
            1)
                return 0
                ;;
            2)
                show_configuration_summary
                break
                ;;
            3)
                return 1
                ;;
            *)
                log_error "Op√ß√£o inv√°lida."
                break
                ;;
        esac
    done
    
    # Se chegou aqui, n√£o confirmou
    return 1
}

show_help_interactive() {
    clear
    log_header "AJUDA E DOCUMENTA√á√ÉO"
    
    cat << EOF
${BOLD}${WHITE}Guia de Uso do Instalador AWX${NC}

${CYAN}${ROCKET} Instala√ß√£o Autom√°tica:${NC}
  ‚Ä¢ Detecta recursos automaticamente
  ‚Ä¢ Configura ambiente otimizado
  ‚Ä¢ Ideal para a maioria dos usu√°rios
  ‚Ä¢ Processo completamente automatizado

${CYAN}${GEAR} Configura√ß√£o Manual:${NC}
  ‚Ä¢ Controle total sobre recursos
  ‚Ä¢ Personaliza√ß√£o de nomes e portas
  ‚Ä¢ Recomendado para usu√°rios avan√ßados
  ‚Ä¢ Valida√ß√£o de entrada em tempo real

${CYAN}${INFO} Recursos M√≠nimos:${NC}
  ‚Ä¢ CPU: 2 cores (recomendado 4+)
  ‚Ä¢ RAM: 4 GB (recomendado 8 GB+)
  ‚Ä¢ Disco: 20 GB livre
  ‚Ä¢ SO: Ubuntu 18.04+ (testado)

${CYAN}${WARNING} Depend√™ncias:${NC}
  ‚Ä¢ Docker CE
  ‚Ä¢ Kind (Kubernetes in Docker)
  ‚Ä¢ kubectl
  ‚Ä¢ Helm 3
  ‚Ä¢ Python 3.9+

${CYAN}${CHECK} P√≥s-instala√ß√£o:${NC}
  ‚Ä¢ AWX acess√≠vel via navegador
  ‚Ä¢ Usu√°rio: admin
  ‚Ä¢ Senha: exibida no final
  ‚Ä¢ Logs dispon√≠veis via kubectl

${DIM}Para mais informa√ß√µes, visite: https://github.com/ansible/awx${NC}
EOF
    
    pause_with_style "Pressione qualquer tecla para voltar"
}

# ============================
# FUN√á√ïES DE INSTALA√á√ÉO APRIMORADAS
# ============================

start_installation() {
    log_header "INICIANDO INSTALA√á√ÉO AWX"
    
    if [ "$MODE" = "auto" ]; then
        log_step "Modo autom√°tico selecionado - detectando configura√ß√£o ideal..."
        CLUSTER_NAME=${CLUSTER_NAME:-"awx-cluster-auto"}
        HOST_PORT=${HOST_PORT:-8080}
    fi
    
    log_info "Configura√ß√£o selecionada:"
    log_info "  ‚Ä¢ Cluster: ${CLUSTER_NAME}"
    log_info "  ‚Ä¢ Porta: ${HOST_PORT}"
    log_info "  ‚Ä¢ Perfil: ${PERFIL}"
    log_info "  ‚Ä¢ CPUs: ${CORES} (${NODE_CPU} alocadas)"
    log_info "  ‚Ä¢ Mem√≥ria: ${MEM_MB}MB (${NODE_MEM_MB}MB alocadas)"
    
    echo -e "\n${BOLD}Fases da instala√ß√£o:${NC}"
    echo -e "1. ${DIM}Instala√ß√£o de depend√™ncias${NC}"
    echo -e "2. ${DIM}Cria√ß√£o do cluster Kind${NC}"
    echo -e "3. ${DIM}Cria√ß√£o do Execution Environment${NC}"
    echo -e "4. ${DIM}Instala√ß√£o do AWX${NC}"
    echo -e "5. ${DIM}Configura√ß√£o final${NC}"
    
    pause_with_style "Pressione qualquer tecla para iniciar"
    
    # Instalar depend√™ncias com progresso
    install_dependencies_with_progress
    
    # Continuar com instala√ß√£o original
    create_kind_cluster
    create_execution_environment  
    install_awx
    wait_for_awx
    get_awx_password
    show_final_info_enhanced
}

install_dependencies_with_progress() {
    log_header "INSTALA√á√ÉO DE DEPEND√äNCIAS"
    
    local deps=("python3.9" "docker" "kind" "kubectl" "helm" "ansible")
    local total=${#deps[@]}
    local current=0
    
    for dep in "${deps[@]}"; do
        current=$((current + 1))
        show_progress $current $total "Instalando $dep"
        
        case $dep in
            "python3.9")
                install_python39 > /dev/null 2>&1 &
                show_spinner $! "Instalando Python 3.9"
                ;;
            "docker")
                install_docker > /dev/null 2>&1 &
                show_spinner $! "Instalando Docker"
                ;;
            "kind")
                install_kind > /dev/null 2>&1 &
                show_spinner $! "Instalando Kind"
                ;;
            "kubectl")
                install_kubectl > /dev/null 2>&1 &
                show_spinner $! "Instalando kubectl"
                ;;
            "helm")
                install_helm > /dev/null 2>&1 &
                show_spinner $! "Instalando Helm"
                ;;
            "ansible")
                install_ansible_tools > /dev/null 2>&1 &
                show_spinner $! "Instalando Ansible"
                ;;
        esac
        
        sleep 0.5 # Pequena pausa para melhor UX
    done
    
    check_docker_running
    start_local_registry
    
    log_success "Todas as depend√™ncias foram instaladas!"
}

show_final_info_enhanced() {
    clear
    log_header "üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO! üéâ"
    
    # Obter IP do n√≥
    local node_ip=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
    
    echo -e "${GREEN}${BOLD}Seu ambiente AWX est√° pronto para uso!${NC}\n"
    
    # Informa√ß√µes de acesso em box estilizado
    echo -e "${CYAN}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ${NC}"
    echo -e "${CYAN}‚îÇ${NC} ${BOLD}${WHITE}üåê INFORMA√á√ïES DE ACESSO${NC} ${CYAN}‚îÇ${NC}"
    echo -e "${CYAN}‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§${NC}"
    echo -e "${CYAN}‚îÇ${NC} ${BOLD}URL:${NC} ${GREEN}http://${node_ip}:${HOST_PORT}${NC} ${CYAN}‚îÇ${NC}"
    echo -e "${CYAN}‚îÇ${NC} ${BOLD}Usu√°rio:${NC} ${GREEN}admin${NC} ${CYAN}‚îÇ${NC}"
    echo -e "${CYAN}‚îÇ${NC} ${BOLD}Senha:${NC} ${GREEN}$AWX_PASSWORD${NC} ${CYAN}‚îÇ${NC}"
    echo -e "${CYAN}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ${NC}"
    
    # Informa√ß√µes t√©cnicas
    echo -e "\n${PURPLE}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ${NC}"
    echo -e "${PURPLE}‚îÇ${NC} ${BOLD}${WHITE}‚öôÔ∏è  CONFIGURA√á√ÉO T√âCNICA${NC} ${PURPLE}‚îÇ${NC}"
    echo -e "${PURPLE}‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§${NC}"
    echo -e "${PURPLE}‚îÇ${NC} ${BOLD}Cluster:${NC} ${GREEN}${CLUSTER_NAME}${NC} ${PURPLE}‚îÇ${NC}"
    echo -e "${PURPLE}‚îÇ${NC} ${BOLD}Perfil:${NC} ${GREEN}${PERFIL}${NC} ${PURPLE}‚îÇ${NC}"
    echo -e "${PURPLE}‚îÇ${NC} ${BOLD}Web R√©plicas:${NC} ${GREEN}${WEB_REPLICAS}${NC} ${PURPLE}‚îÇ${NC}"
    echo -e "${PURPLE}‚îÇ${NC} ${BOLD}Task R√©plicas:${NC} ${GREEN}${TASK_REPLICAS}${NC} ${PURPLE}‚îÇ${NC}"
    echo -e "${PURPLE}‚îÇ${NC} ${BOLD}Recursos:${NC} ${GREEN}${NODE_CPU} CPU, ${NODE_MEM_MB}MB${NC} ${PURPLE}‚îÇ${NC}"
    echo -e "${PURPLE}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ${NC}"
    
    # Comandos √∫teis
    echo -e "\n${YELLOW}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ${NC}"
    echo -e "${YELLOW}‚îÇ${NC} ${BOLD}${WHITE}üõ†Ô∏è  COMANDOS √öTEIS${NC} ${YELLOW}‚îÇ${NC}"
    echo -e "${YELLOW}‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§${NC}"
    echo -e "${YELLOW}‚îÇ${NC} ${DIM}Ver pods:${NC}"
    echo -e "${YELLOW}‚îÇ${NC}   ${CYAN}kubectl get pods -n $AWX_NAMESPACE${NC}"
    echo -e "${YELLOW}‚îÇ${NC} ${DIM}Ver logs web:${NC}"
    echo -e "${YELLOW}‚îÇ${NC}   ${CYAN}kubectl logs -n $AWX_NAMESPACE deployment/awx-$PERFIL-web${NC}"
    echo -e "${YELLOW}‚îÇ${NC} ${DIM}Deletar cluster:${NC}"
    echo -e "${YELLOW}‚îÇ${NC}   ${CYAN}kind delete cluster --name $CLUSTER_NAME${NC}"
    echo -e "${YELLOW}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ${NC}"
    
    # Cr√©ditos finais
    echo -e "\n${DIM}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
    echo -e "${DIM}Desenvolvido por ${GREEN}${BOLD}Eduardo Gutierrez${NC}${DIM} com ${RED}‚ô•${NC}${DIM} para a comunidade${NC}"
    echo -e "${DIM}Vers√£o ${SCRIPT_VERSION} - Script AWX Interativo${NC}"
    echo -e "${DIM}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
    
    echo -e "\n${BOLD}${GREEN}üéâ Aproveite seu novo ambiente AWX! üéâ${NC}\n"
}

# ============================
# INSERIR TODAS AS FUN√á√ïES ORIGINAIS AQUI
# ============================
# [Todas as fun√ß√µes originais do script permanecem inalteradas]
# Incluindo: command_exists, user_in_docker_group, validate_*, detect_*, 
# calculate_*, initialize_resources, install_*, create_*, wait_for_awx, etc.

# [FUN√á√ïES ORIGINAIS MANTIDAS - inserir todo o c√≥digo original aqui]

# ============================
# EXECU√á√ÉO PRINCIPAL MODIFICADA
# ============================

# Valores padr√£o
MODE="interactive"
DEFAULT_HOST_PORT=8080
INSTALL_DEPS_ONLY=false
VERBOSE=false
FORCE_CPU=""
FORCE_MEM_MB=""

# Parse das op√ß√µes da linha de comando (mantendo compatibilidade)
while getopts "c:p:f:m:dvha" opt; do
    case ${opt} in
        c)
            CLUSTER_NAME="$OPTARG"
            ;;
        p)
            if ! validate_port "$OPTARG"; then
                exit 1
            fi
            HOST_PORT="$OPTARG"
            ;;
        f)
            if ! validate_cpu "$OPTARG"; then
                exit 1
            fi
            FORCE_CPU="$OPTARG"
            ;;
        m)
            if ! validate_memory "$OPTARG"; then
                exit 1
            fi
            FORCE_MEM_MB="$OPTARG"
            ;;
        d)
            INSTALL_DEPS_ONLY=true
            ;;
        v)
            VERBOSE=true
            ;;
        a)
            MODE="auto"
            ;;
        h)
            show_help
            exit 0
            ;;
        *)
            log_error "Op√ß√£o inv√°lida: -$OPTARG"
            show_help
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

# Inicializar recursos
initialize_resources

# Aplicar valores padr√£o
CLUSTER_NAME=${CLUSTER_NAME:-"awx-cluster-${PERFIL}"}
HOST_PORT=${HOST_PORT:-$DEFAULT_HOST_PORT}
AWX_NAMESPACE="awx"

# Execu√ß√£o principal
if [ "$MODE" = "auto" ] || [ "$INSTALL_DEPS_ONLY" = true ]; then
    # Modo autom√°tico original (linha de comando)
    if [ "$INSTALL_DEPS_ONLY" = true ]; then
        install_dependencies
        log_success "‚úÖ Depend√™ncias instaladas com sucesso!"
        exit 0
    fi
    
    # Instala√ß√£o autom√°tica completa
    start_installation
else
    # Modo interativo (novo)
    interactive_main_menu
fi

log_success "üéâ Script executado com sucesso!"
