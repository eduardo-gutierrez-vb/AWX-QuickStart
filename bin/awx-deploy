#!/bin/bash
# bin/awx-deploy - Script principal de implanta√ß√£o AWX modularizado

set -euo pipefail

# Configura√ß√£o de diret√≥rios
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LIB_DIR="$PROJECT_ROOT/lib"
CONFIG_DIR="$PROJECT_ROOT/config"

# Carregar m√≥dulos core
source "$LIB_DIR/core/logger.sh"
source "$LIB_DIR/core/validator.sh"
source "$LIB_DIR/core/resource_calculator.sh"
source "$LIB_DIR/utils/common.sh"

# Carregar servi√ßos
source "$LIB_DIR/services/dependency_manager.sh"
source "$LIB_DIR/services/kind_manager.sh"
source "$LIB_DIR/services/registry_manager.sh"
source "$LIB_DIR/services/ee_builder.sh"
source "$LIB_DIR/services/awx_installer.sh"

# Configura√ß√µes padr√£o
DEFAULT_HOST_PORT=8080
DEFAULT_REGISTRY_PORT=5001
DEFAULT_AWX_NAMESPACE="awx"

# Vari√°veis globais
CLUSTER_NAME=""
HOST_PORT=""
FORCE_CPU=""
FORCE_MEM_MB=""
INSTALL_DEPS_ONLY=false
VERBOSE=false
CONFIG_FILE=""

# Fun√ß√£o de ajuda
show_help() {
    cat << EOF
$(log_header "Script de Implanta√ß√£o AWX com Kind - Vers√£o Modular")

$(echo -e "${LOG_COLORS[WHITE]}USO:${LOG_COLORS[NC]}")
    $0 [OP√á√ïES]...

$(echo -e "${LOG_COLORS[WHITE]}OP√á√ïES:${LOG_COLORS[NC]}")
    $(echo -e "${LOG_COLORS[GREEN]}-c NOME${LOG_COLORS[NC]}")      Nome do cluster Kind (padr√£o: ser√° calculado baseado no perfil)
    $(echo -e "${LOG_COLORS[GREEN]}-p PORTA${LOG_COLORS[NC]}")     Porta do host para acessar AWX (padr√£o: 8080)
    $(echo -e "${LOG_COLORS[GREEN]}-f CPU${LOG_COLORS[NC]}")       For√ßar n√∫mero de CPUs (ex: 4)
    $(echo -e "${LOG_COLORS[GREEN]}-m MEMORIA${LOG_COLORS[NC]}")   For√ßar quantidade de mem√≥ria em MB (ex: 8192)
    $(echo -e "${LOG_COLORS[GREEN]}-d${LOG_COLORS[NC]}")           Instalar apenas depend√™ncias
    $(echo -e "${LOG_COLORS[GREEN]}-v${LOG_COLORS[NC]}")           Modo verboso (debug)
    $(echo -e "${LOG_COLORS[GREEN]}-C CONFIG${LOG_COLORS[NC]}")    Arquivo de configura√ß√£o personalizado
    $(echo -e "${LOG_COLORS[GREEN]}-h${LOG_COLORS[NC]}")           Exibir esta ajuda

$(echo -e "${LOG_COLORS[WHITE]}EXEMPLOS:${LOG_COLORS[NC]}")
    $0                                    # Usar valores padr√£o
    $0 -c meu-cluster -p 8080            # Cluster personalizado na porta 8080
    $0 -f 4 -m 8192                     # For√ßar 4 CPUs e 8GB RAM
    $0 -d                                # Instalar apenas depend√™ncias
    $0 -v -c test-cluster                # Modo verboso com cluster personalizado
    $0 -C config/custom.conf             # Usar configura√ß√£o personalizada

$(echo -e "${LOG_COLORS[WHITE]}CONFIGURA√á√ÉO:${LOG_COLORS[NC]}")
    As configura√ß√µes podem ser personalizadas atrav√©s de:
    - Vari√°veis de ambiente
    - Arquivos de configura√ß√£o em $CONFIG_DIR
    - Par√¢metros de linha de comando (maior prioridade)

$(echo -e "${LOG_COLORS[WHITE]}LOGS:${LOG_COLORS[NC]}")
    Configure LOG_LEVEL (DEBUG|INFO|WARNING|ERROR) para controlar verbosidade
    Configure LOG_FILE para salvar logs em arquivo

EOF
}

# Processamento de argumentos
process_arguments() {
    while getopts "c:p:f:m:dvC:h" opt; do
        case ${opt} in
            c)
                CLUSTER_NAME="$OPTARG"
                ;;
            p)
                HOST_PORT="$OPTARG"
                ;;
            f)
                FORCE_CPU="$OPTARG"
                ;;
            m)
                FORCE_MEM_MB="$OPTARG"
                ;;
            d)
                INSTALL_DEPS_ONLY=true
                ;;
            v)
                VERBOSE=true
                LOG_LEVEL="DEBUG"
                ;;
            C)
                CONFIG_FILE="$OPTARG"
                ;;
            h)
                show_help
                exit 0
                ;;
            *)
                log_error "Op√ß√£o inv√°lida: -$OPTARG"
                show_help
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))
}

# Carregamento de configura√ß√µes
load_configuration() {
    # Carregar configura√ß√£o padr√£o
    local default_config="$CONFIG_DIR/default.conf"
    if [[ -f "$default_config" ]]; then
        log_debug "Carregando configura√ß√£o padr√£o: $default_config"
        source "$default_config"
    fi
    
    # Carregar configura√ß√£o personalizada se especificada
    if [[ -n "$CONFIG_FILE" ]]; then
        if [[ -f "$CONFIG_FILE" ]]; then
            log_debug "Carregando configura√ß√£o personalizada: $CONFIG_FILE"
            source "$CONFIG_FILE"
        else
            log_error "Arquivo de configura√ß√£o n√£o encontrado: $CONFIG_FILE"
            exit 1
        fi
    fi
    
    # Configurar logging
    configure_logging
}

# Inicializa√ß√£o do sistema
initialize_system() {
    log_header "INICIALIZA√á√ÉO DO SISTEMA"
    
    # Validar par√¢metros de entrada
    if ! validate_input_parameters "$CLUSTER_NAME" "$HOST_PORT" "$FORCE_CPU" "$FORCE_MEM_MB"; then
        exit 1
    fi
    
    # Inicializar c√°lculos de recursos
    initialize_resource_calculations
    
    # Definir valores padr√£o baseados nos c√°lculos
    CLUSTER_NAME=${CLUSTER_NAME:-"awx-cluster-${SYSTEM_RESOURCES[PROFILE]}"}
    HOST_PORT=${HOST_PORT:-$DEFAULT_HOST_PORT}
    
    # Exportar vari√°veis para compatibilidade com m√≥dulos legacy
    export_resource_variables
    export CLUSTER_NAME HOST_PORT AWX_NAMESPACE
    export REGISTRY_PORT=$DEFAULT_REGISTRY_PORT
    export AWX_NAMESPACE=$DEFAULT_AWX_NAMESPACE
    
    # Validar disponibilidade da porta
    if ! check_port_availability "$HOST_PORT" "AWX"; then
        exit 1
    fi
    
    log_success "Sistema inicializado com sucesso"
}

# Fun√ß√£o principal de implanta√ß√£o
deploy_awx() {
    log_header "INICIANDO IMPLANTA√á√ÉO AWX"
    
    log_info "üíª Configura√ß√£o do Sistema:"
    log_info "   CPUs: ${SYSTEM_RESOURCES[CPU_CORES]}"
    log_info "   Mem√≥ria: ${SYSTEM_RESOURCES[MEMORY_MB]}MB"
    log_info "   Perfil: ${SYSTEM_RESOURCES[PROFILE]}"
    
    log_info "üéØ Configura√ß√£o de Implanta√ß√£o:"
    log_info "   Cluster: $CLUSTER_NAME"
    log_info "   Porta: $HOST_PORT"
    log_info "   Namespace: $AWX_NAMESPACE"
    log_info "   Web R√©plicas: ${AWX_RESOURCES[WEB_REPLICAS]}"
    log_info "   Task R√©plicas: ${AWX_RESOURCES[TASK_REPLICAS]}"
    
    # Executar etapas de implanta√ß√£o
    install_all_dependencies
    
    if [[ "$INSTALL_DEPS_ONLY" == "true" ]]; then
        log_success "‚úÖ Depend√™ncias instaladas com sucesso!"
        log_info "Execute o script novamente sem a op√ß√£o -d para instalar o AWX"
        exit 0
    fi
    
    create_kind_cluster
    create_execution_environment
    install_awx_complete
    wait_for_awx_ready
    get_awx_credentials
    show_deployment_summary
    
    log_success "üéâ Implanta√ß√£o do AWX conclu√≠da com sucesso!"
}

# Fun√ß√£o principal
main() {
    # Configurar tratamento de erros
    trap 'log_error "Erro na linha $LINENO. Comando: $BASH_COMMAND"' ERR
    
    # Processar argumentos e configura√ß√µes
    process_arguments "$@"
    load_configuration
    
    # Validar pr√©-requisitos se n√£o for apenas instala√ß√£o de depend√™ncias
    if [[ "$INSTALL_DEPS_ONLY" == "false" ]]; then
        if ! validate_prerequisites; then
            exit 1
        fi
    fi
    
    # Inicializar sistema
    initialize_system
    
    # Executar implanta√ß√£o
    deploy_awx
}

# Executar fun√ß√£o principal se script for chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
